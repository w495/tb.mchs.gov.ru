Devel

Чтобы развернуть систему для разработчика потребуются:

    git (чтобы получить последнюю версию системы);
    erlang (для работы проекта);
    make (для сборки проекта);
    g++ (для sablotron);
    expat (для sablotron);
    libexpat1 (для sablotron);
    libexpat1-dev (для sablotron);
    postgreSql (на нем разворачивается база данных);
    sudo (не обязательно, но желательно).

Все остальные пакеты находятся в соотвествующих папках проекта.

Желательно использовать *nix или иную POSIX совместимую систему.
Разработчики (Илья Никитин и Сергей Кожевников) используют [K]Ubuntu
(версии не ниже 10),
но может подойти любая Linux (будет проще если она основана на Debian).
Здесь и ниже будем обозначать желаемую версию Linux как <deb+>
Сборка проекта

Далее будет нужно:

	1) Подключиться к локадьно сети linksys.

	2) Выбрать\создать папку расположения проекта и перейти в нее.

	3) Набрать команду в консоли:

	$> git clone ssh://<user>@192.168.2.253:7777/home/repos.git/MinistryChS/

	Где вместо <user> ввести имя своего корпоративного пользователя.
	Нажать <Ввод> и ввести свой корпоративный пароль.

	4) После чего ввести команду:

	$> git checkout devel

	для переключения в ветку разработки.

	5) Проверить текущую ветку:

	$> git branch
		* devel
		master

	Звезда у devel означает, что это текущая ветка.

	6) Перейти в папку: ./MinistryChS/deps

	7) Собрать Sablotron. Набрать команды:

	$> tar -xzfv Sablot-1.0.3.tar.gz

	$>cd ./Sablot-1.0.3.

	$> make

	$> sudo make install

	8) После того, что бы наша система смогла увидеть сборку Sablot,
	нужно переместить файлы сборки в путь линковки.
	В Linux это /usr/lib/ и не существует стандартных путей его изменения.
	Тогда  надо ввести команду:

	$> sudo ls /usr/local/lib/libsablot.* | xargs -i sudo mv {} /usr/lib/

	8) Перейти в cd ..

	9) Собрать драйвер взаимодействия Postgres Sql и нашей системы.

	Набрать команды:

	$> tar -xzfv epgsql-1.2.tar.gz

	10) Далее требуется скопировать папку epgsql-1.2 в директорию библиотек erlang (обычно /usr/lib/erlang/lib/).

	$> sudo cp -R epgsql-1.2 /usr/lib/erlang/lib/

	11) Перейти в cd ../../web, чтобы оказаться в основной рабочей папке. Далее эта папка будет считаться текущей.

	12) Набрать команду:

	$> make debug

	Убедиться, что проект собрался (команда выполнилась без ошибок).
	Развертывание базы данных

Для развертывание БД нужно:

	1) Установить PostgreSql, Желательно стандартным образом, например через менеджер пакетов. В <deb+>:

	$> sudo aptitude install postgresql
	$> sudo aptitude install postgresql-client
	# или $> sudo aptitude install postgresql-client-common

	2) Проверить наличие команд:

	$> createdb
	$> dropdb
	$> createuser
	$> psql


	Если их не окажется попробовать установить недостающие пакеты. Если это не помогло переустановить PostgreSql иным способом.

	3) Создать базу данных

	$> sudo -u postgres createdb mchs

	4) Создать пользователя базы данных:

	$> sudo -u postgres createuser -P
	Enter name of role to add: <bd-user-name>
	Enter password for new role:
	Enter it again:
	Shall the new role be a superuser? (y/n) y

	Где вместо <bd-user-name> указать имя пользователя БД, для простоты лучше чтобы оно совпало  с именем пользователя системы.
	При требовании ввести пароль --- нужно ввести пароль, для простоты желательно, чтобы он совпадал с именем пользователя БД.
	Внимание!: условия простоты распространяются только на режим отладки.

	5) Попробовать подключиться к базе данных:

	$> psql -U <bd-user-name> -d mchs -h localhost

	Вам предложат ввести пароль пользователя БД.

	Если на этом этапе выдается ошибка и вы уверены что ввели все верно, то можно изменить файл /etc/postgresql/8.4/main/pg_hba.conf
	(У вас этот путь может не совпадать. Всего скорее придется изменить версию.)

	Для этого надо открыть его в режиме редактиролвания от имени администратора системы и заменить последние строки,
	чтобы они выглядели примерно так (приводятся вместе с номерами строк):

	76 # Database administrative login by UNIX sockets
	77 local   all         postgres                          trust
	78
	79 # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
	80
	81 # "local" is for Unix domain socket connections only
	82 local   all         all                               trust


	В данном случае лучше ориентироваться не номера строк, а на слова в коментариях.
	В некоторых случаях в конце файла можно найти слово peer или md5, его можно просто заменить на trust.

	После чего еще раз набрать:

	$> psql -U <bd-user-name> -d mchs -h localhost

	Убедиться, что был осуществлен вход в базу данных.

	6) После чего набрать команды:

	# для создания схемы:
	$> psql -U <bd-user-name> -d mchs < ./sql/scheme.sql
	# для создания хранимых процедур:
	$> psql -U <bd-user-name> -d mchs < ./sql/proc.sql
	# для заполнения начальными данными:
	$> psql -U <bd-user-name> -d mchs < ./sql/insert.sql

	# Можно и просто набрать  ./sql/redb.sh

	Запуск проекта

	1) ﻿Скопировать файл ./app_dev.config.template в ./app_dev.config

	2) Изменить в ./app_dev.config строки относящиеся к базе данных.

	{mchs_db_user, "<bd-user-name>"},
	{mchs_db_password, "<bd-user-password>"},

	3) Запустить проект командой

	./start_dev.sh

	4) Запустить браузер и ввести в нем адрес http://0000:8000/ или http://0000:8080/

	5) Насладиться прекрасным видом страницы. Если этого не произошло, то перейти к следующему разделу.
	Решение проблем

	...